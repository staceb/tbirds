var Backbone, BootstrapNavBarView, MainChannel, MainPageLayout, Marionette, MessageChannel, MessagesView, initialize_page;

Backbone = require('backbone');

Marionette = require('backbone.marionette');

require('bootstrap');

require('./messages');

MainPageLayout = require('./views/layout').MainPageLayout;

BootstrapNavBarView = require('./views/navbar').BootstrapNavBarView;

MessagesView = require('./views/messages');

MainChannel = Backbone.Radio.channel('global');

MessageChannel = Backbone.Radio.channel('messages');

initialize_page = function(app) {
  var AppView, appmodel, layout, layout_opts;
  appmodel = MainChannel.request('main:app:appmodel');
  if (appmodel.has('appView')) {
    AppView = appmodel.get('appView');
  } else {
    AppView = MainPageLayout;
  }
  layout_opts = {};
  if (appmodel.has('layout_template')) {
    layout_opts.template = appmodel.get('layout_template');
  }
  layout = new AppView(layout_opts);
  layout.on('render', function() {
    var messages, navbar, nbclass;
    MainChannel.reply('main:app:get-region', function(region) {
      return app.getView().getRegion(region);
    });
    if (appmodel.has('navbarView')) {
      if (__DEV__) {
        console.log("using custom navbar_viewclass");
      }
      nbclass = appmodel.get('navbarView');
    } else {
      nbclass = BootstrapNavBarView;
    }
    navbar = new nbclass({
      model: appmodel
    });
    layout.showChildView('navbar', navbar);
    messages = new MessagesView({
      collection: MessageChannel.request('messages')
    });
    return layout.showChildView('messages', messages);
  });
  return app.showView(layout);
};

module.exports = initialize_page;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluaXRwYWdlLmpzIiwic291cmNlcyI6WyJhcHAtaW5pdHBhZ2UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUNYLFVBQUEsR0FBYSxPQUFBLENBQVEscUJBQVI7O0FBRWIsT0FBQSxDQUFRLFdBQVI7O0FBRUEsT0FBQSxDQUFRLFlBQVI7O0FBRUUsaUJBQW1CLE9BQUEsQ0FBUSxnQkFBUjs7QUFDbkIsc0JBQXdCLE9BQUEsQ0FBUSxnQkFBUjs7QUFDMUIsWUFBQSxHQUFlLE9BQUEsQ0FBUSxrQkFBUjs7QUFFZixXQUFBLEdBQWMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFFBQXZCOztBQUNkLGNBQUEsR0FBaUIsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFmLENBQXVCLFVBQXZCOztBQUVqQixlQUFBLEdBQWtCLFNBQUMsR0FBRDtBQUVoQixNQUFBO0VBQUEsUUFBQSxHQUFXLFdBQVcsQ0FBQyxPQUFaLENBQW9CLG1CQUFwQjtFQUVYLElBQUcsUUFBUSxDQUFDLEdBQVQsQ0FBYSxTQUFiLENBQUg7SUFDRSxPQUFBLEdBQVUsUUFBUSxDQUFDLEdBQVQsQ0FBYSxTQUFiLEVBRFo7R0FBQSxNQUFBO0lBR0UsT0FBQSxHQUFVLGVBSFo7O0VBS0EsV0FBQSxHQUFjO0VBQ2QsSUFBRyxRQUFRLENBQUMsR0FBVCxDQUFhLGlCQUFiLENBQUg7SUFDRSxXQUFXLENBQUMsUUFBWixHQUF1QixRQUFRLENBQUMsR0FBVCxDQUFhLGlCQUFiLEVBRHpCOztFQUVBLE1BQUEsR0FBUyxJQUFJLE9BQUosQ0FBWSxXQUFaO0VBSVQsTUFBTSxDQUFDLEVBQVAsQ0FBVSxRQUFWLEVBQW9CLFNBQUE7QUFJbEIsUUFBQTtJQUFBLFdBQVcsQ0FBQyxLQUFaLENBQWtCLHFCQUFsQixFQUF5QyxTQUFDLE1BQUQ7YUFDdkMsR0FBRyxDQUFDLE9BQUosQ0FBQSxDQUFhLENBQUMsU0FBZCxDQUF3QixNQUF4QjtJQUR1QyxDQUF6QztJQUdBLElBQUcsUUFBUSxDQUFDLEdBQVQsQ0FBYSxZQUFiLENBQUg7TUFDRSxJQUFHLE9BQUg7UUFDRSxPQUFPLENBQUMsR0FBUixDQUFZLCtCQUFaLEVBREY7O01BRUEsT0FBQSxHQUFVLFFBQVEsQ0FBQyxHQUFULENBQWEsWUFBYixFQUhaO0tBQUEsTUFBQTtNQUtFLE9BQUEsR0FBVSxvQkFMWjs7SUFNQSxNQUFBLEdBQVMsSUFBSSxPQUFKLENBQ1A7TUFBQSxLQUFBLEVBQU8sUUFBUDtLQURPO0lBRVQsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsUUFBckIsRUFBK0IsTUFBL0I7SUFDQSxRQUFBLEdBQVcsSUFBSSxZQUFKLENBQ1Q7TUFBQSxVQUFBLEVBQVksY0FBYyxDQUFDLE9BQWYsQ0FBdUIsVUFBdkIsQ0FBWjtLQURTO1dBRVgsTUFBTSxDQUFDLGFBQVAsQ0FBcUIsVUFBckIsRUFBaUMsUUFBakM7RUFsQmtCLENBQXBCO1NBb0JBLEdBQUcsQ0FBQyxRQUFKLENBQWEsTUFBYjtBQXBDZ0I7O0FBc0NsQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIkJhY2tib25lID0gcmVxdWlyZSAnYmFja2JvbmUnXG5NYXJpb25ldHRlID0gcmVxdWlyZSAnYmFja2JvbmUubWFyaW9uZXR0ZSdcbiAgXG5yZXF1aXJlICdib290c3RyYXAnXG5cbnJlcXVpcmUgJy4vbWVzc2FnZXMnXG5cbnsgTWFpblBhZ2VMYXlvdXQgfSA9IHJlcXVpcmUgJy4vdmlld3MvbGF5b3V0J1xueyBCb290c3RyYXBOYXZCYXJWaWV3IH0gPSByZXF1aXJlICcuL3ZpZXdzL25hdmJhcidcbk1lc3NhZ2VzVmlldyA9IHJlcXVpcmUgJy4vdmlld3MvbWVzc2FnZXMnXG5cbk1haW5DaGFubmVsID0gQmFja2JvbmUuUmFkaW8uY2hhbm5lbCAnZ2xvYmFsJ1xuTWVzc2FnZUNoYW5uZWwgPSBCYWNrYm9uZS5SYWRpby5jaGFubmVsICdtZXNzYWdlcydcblxuaW5pdGlhbGl6ZV9wYWdlID0gKGFwcCkgLT5cbiAgI3JlZ2lvbnMgPSBNYWluQ2hhbm5lbC5yZXF1ZXN0ICdtYWluOmFwcDpyZWdpb25zJ1xuICBhcHBtb2RlbCA9IE1haW5DaGFubmVsLnJlcXVlc3QgJ21haW46YXBwOmFwcG1vZGVsJ1xuICAjIGNyZWF0ZSBsYXlvdXQgdmlld1xuICBpZiBhcHBtb2RlbC5oYXMgJ2FwcFZpZXcnXG4gICAgQXBwVmlldyA9IGFwcG1vZGVsLmdldCAnYXBwVmlldydcbiAgZWxzZVxuICAgIEFwcFZpZXcgPSBNYWluUGFnZUxheW91dFxuICAgIFxuICBsYXlvdXRfb3B0cyA9IHt9XG4gIGlmIGFwcG1vZGVsLmhhcyAnbGF5b3V0X3RlbXBsYXRlJ1xuICAgIGxheW91dF9vcHRzLnRlbXBsYXRlID0gYXBwbW9kZWwuZ2V0ICdsYXlvdXRfdGVtcGxhdGUnXG4gIGxheW91dCA9IG5ldyBBcHBWaWV3IGxheW91dF9vcHRzXG4gICMgc2V0IHRoZSBtYWluIGxheW91dCB2aWV3IHRvIGNyZWF0ZSBhbmQgc2hvd1xuICAjIHRoZSBuYXZiYXIgd2hlbiBpdCBpcyBzaG93bi4gIFRoaXMgYXNzdXJlcyB1c1xuICAjIHRoYXQgdGhlICRlbCBpcyBwcmVzZW50IGluIHRoZSBET00uIFxuICBsYXlvdXQub24gJ3JlbmRlcicsIC0+XG4gICAgIyBGSVhNRSBjcmVhdGUgZm9vdGVyIHZpZXdcbiAgICAjIFxuICAgICMgVGhpcyBpcyB1c2VkIHRvIGdldCByZWdpb25zIGluIHRoZSByb290IGxheW91dFxuICAgIE1haW5DaGFubmVsLnJlcGx5ICdtYWluOmFwcDpnZXQtcmVnaW9uJywgKHJlZ2lvbikgLT5cbiAgICAgIGFwcC5nZXRWaWV3KCkuZ2V0UmVnaW9uKHJlZ2lvbilcbiAgICAgIFxuICAgIGlmIGFwcG1vZGVsLmhhcyAnbmF2YmFyVmlldydcbiAgICAgIGlmIF9fREVWX19cbiAgICAgICAgY29uc29sZS5sb2cgXCJ1c2luZyBjdXN0b20gbmF2YmFyX3ZpZXdjbGFzc1wiXG4gICAgICBuYmNsYXNzID0gYXBwbW9kZWwuZ2V0ICduYXZiYXJWaWV3J1xuICAgIGVsc2VcbiAgICAgIG5iY2xhc3MgPSBCb290c3RyYXBOYXZCYXJWaWV3XG4gICAgbmF2YmFyID0gbmV3IG5iY2xhc3NcbiAgICAgIG1vZGVsOiBhcHBtb2RlbFxuICAgIGxheW91dC5zaG93Q2hpbGRWaWV3ICduYXZiYXInLCBuYXZiYXJcbiAgICBtZXNzYWdlcyA9IG5ldyBNZXNzYWdlc1ZpZXdcbiAgICAgIGNvbGxlY3Rpb246IE1lc3NhZ2VDaGFubmVsLnJlcXVlc3QgJ21lc3NhZ2VzJ1xuICAgIGxheW91dC5zaG93Q2hpbGRWaWV3ICdtZXNzYWdlcycsIG1lc3NhZ2VzXG4gIFxuICBhcHAuc2hvd1ZpZXcgbGF5b3V0XG4gIFxubW9kdWxlLmV4cG9ydHMgPSBpbml0aWFsaXplX3BhZ2VcbiJdfQ==
